buildscript {
    dependencies {
        classpath brazilGradle.tool('BrazilGradleQualityDefaults')
    }
}

plugins {
    id "java"
    id "jacoco"
    id "brazil-quality-defaults"
    // To build a shadow jar of this resource provider
    id 'com.github.johnrengelman.shadow'
}

def resource_name_with_dashes = 'aws-ec2-capacityreservationfleet'
def schema_file = "${resource_name_with_dashes}.json"

description 'CloudFormation Resource Provider - <AWS::EC2::CapacityReservationFleet>'

// Include RPDK generated source by `cfn-cli generate`
sourceSets.main.java.srcDirs += ['target/generated-sources/rpdk']

// Inlcude schema into jar
sourceSets.main.resources {
    srcDir '.'
    include schema_file
}

dependencies {
    compile brazilGradle.build()
    testCompile brazilGradle.testbuild()

}

test {
    useJUnitPlatform()
}

def cfn_command = "${brazilGradle.path('[AWSCloudFormationRPDKJavaPluginTool]run.runtimefarm')}/bin/cfn"

// Generate RPDK wrapper source before compile
task rpdkGenerateSource(type: Exec) {
    workingDir "."
    executable = cfn_command
    args = ["generate"]
}

compileJava.dependsOn(rpdkGenerateSource)

// Run the tests by default
release.dependsOn(check)

// Build a shadow jar for resource provider
shadowJar {
    // cfn-cli requires the artifact under target and suffixed with SNAPSHOT.jar
    classifier = null
    baseName = resource_name_with_dashes
    destinationDir = file("./target")
}

task cfnPackage(type: Exec) {
    dependsOn shadowJar
    workingDir "."
    executable = cfn_command
    args = ["submit", "--dry-run"]
}

// Use `cfn-cli` to build a RPDK package include resource provider shadow jar, schema etc.
task rpdkPackage(type: Zip) {
    dependsOn cfnPackage
    from zipTree("${resource_name_with_dashes}.zip")
    from ("${rootDir}/${resource_name_with_dashes}") {
        include "canary-bundle/**/*"
    }
    destinationDir = file("./build/rpdk")
    archiveName("${resource_name_with_dashes}.zip")
}

assemble.dependsOn(rpdkPackage)

// Delete target folder for clean
clean.doLast {
    file("./target").deleteDir()
    file("${resource_name_with_dashes}.zip").delete()
}